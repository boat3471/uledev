#!/usr/bin/env node
var fs = require('fs');
var path = require('path');
var cmdPath = process.cwd();
var packagePath = path.normalize(path.join(__dirname, '../package.json'));
var packageData = require(packagePath);
var name = packageData && (packageData.name || '');
var version = packageData && (packageData.version || '');
var description = packageData && (packageData.description || '');

var arg, args = process.argv.slice(2);
if(args.length == 0) console.info(description);
while(args.length){
	arg = args.shift();
	switch(arg){
		case '-h':
		case '-help':
			console.error([''
				, '  uledev 命令:'
				, '    -h, --help              显示帮助信息'
				, '    -v, --version           显示版本号'
				// , '    -s, start               运行ULE开发环境, 也'
				, '    init                    初始化ULE开发环境'
				, ''
			].join('\n'));
			break;
		case '-v':
		case '--version':
			console.info(name, version);
			break;
		case 'init':
			init();
			break;
		case '-s':
		case 'start':
			break;
		default:
			console.info('无效命令, 请执行 uledev -h/--help 查询命令');
			break;
	}
}

/* 初始化ULE开发环境 */
function init(){
	initLaunchFile();
	initConfig();
	initDirectory();
	console.info('[OK] 初始化完成!');
}

/* 初始化启动文件 */
function initLaunchFile(){
	var fileName = 'uledev-server';
	var filePath = path.normalize(path.join(cmdPath, fileName));
	var exists = fs.existsSync(filePath);
	if(exists) return;

	var content = [
		'#!/usr/bin/env node',
		'var uledev = require("uledev");',
		'uledev.launch();'
	].join('\n');
	fs.writeFileSync(filePath, content);
	console.info('[OK] 创建启动文件: ', fileName);
}

/* 初始化配置文件 */
function initConfig(){
	var fileName = 'uledev.json';
	var sourcePath = path.normalize(path.join(__dirname, '../lib/uledev.json'));
	var targetPath = path.normalize(path.join(cmdPath, fileName));
	var exists = fs.existsSync(targetPath);
	if(exists) return;

	var sourceData = require(sourcePath);
	var targetContent = JSON.stringify(sourceData, null, 4);
	fs.writeFileSync(targetPath, targetContent);
	console.info('[OK] 创建配置文件: ', fileName);
}

/* 初始化目录结构 */
function initDirectory(){
	mkdirs('wwwroot');
	mkdirs('webroot');
}

function mkdirs(){
	var list = Array.prototype.slice.apply(arguments);
	var dirPath = cmdPath;
	while(list.length){
		var name = list.shift();
		dirPath = path.normalize(path.join(dirPath, name));
		var exists = fs.existsSync(dirPath);
		if(exists) continue;
		fs.mkdirSync(dirPath);
		console.info('[OK] 创建目录: ', name);
	}
}